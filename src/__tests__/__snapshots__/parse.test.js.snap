// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parses function declaration 1`] = `
Node "Program" (1:0)
  body: Array [
    Node "FunctionDeclaration" (1:0)
      value: Node "AssignmentExpression" (1:4)
        left: Node "FunctionParameterExpression" (1:4)
          id: Node "Identifier" (1:4)
            name: "calc"
          params: Array [
            Node "Identifier" (1:9)
              name: "a",
            Node "Identifier" (1:11)
              name: "b",
            Node "Identifier" (1:13)
              name: "c",
          ]
        right: Node "MathExpression" (1:17)
          left: Node "Identifier" (1:17)
            name: "a"
          operator: "+"
          right: Node "MathExpression" (1:21)
            left: Node "Identifier" (1:21)
              name: "b"
            operator: "*"
            right: Node "Identifier" (1:25)
              name: "c",
    Node "FunctionDeclaration" (2:0)
      value: Node "AssignmentExpression" (2:4)
        left: Node "FunctionParameterExpression" (2:4)
          id: Node "Identifier" (2:4)
            name: "foo"
          params: Array [
            Node "Identifier" (2:8)
              name: "a",
            Node "Identifier" (2:10)
              name: "add",
          ]
        right: Node "FunctionCallExpression" (2:16)
          id: Node "Identifier" (2:16)
            name: "add"
          params: Array [
            Node "Identifier" (2:20)
              name: "a",
          ],
    Node "FunctionDeclaration" (3:0)
      value: Node "AssignmentExpression" (3:4)
        left: Node "Identifier" (3:4)
          name: "foo"
        right: Node "FunctionCallExpression" (3:10)
          id: Node "Identifier" (3:10)
            name: "show"
          params: Array [
            Node "StringLiteral" (3:15)
              value: "hello world",
          ],
  ]
`;

exports[`parses function declaration 2`] = `
Node "Program" (1:0)
  body: Array [
    Node "FunctionDeclaration" (1:0)
      value: Node "AssignmentExpression" (1:4)
        left: Node "FunctionParameterExpression" (1:4)
          id: Node "Identifier" (1:4)
            name: "add"
          params: Array [
            Node "Identifier" (1:8)
              name: "a",
            Node "Identifier" (1:10)
              name: "b",
          ]
        right: Node "BlockStatement" (1:14)
          body: Array [
            Node "LetDeclaration" (2:2)
              value: Node "AssignmentExpression" (2:6)
                left: Node "Identifier" (2:6)
                  name: "c"
                right: Node "MathExpression" (2:10)
                  left: Node "Identifier" (2:10)
                    name: "a"
                  operator: "+"
                  right: Node "Identifier" (2:14)
                    name: "b",
            Node "ReturnStatement" (4:2)
              value: Node "Identifier" (4:9)
                name: "c",
          ],
    Node "FunctionDeclaration" (7:0)
      value: Node "AssignmentExpression" (7:4)
        left: Node "Identifier" (7:4)
          name: "foo"
        right: Node "FunctionCallExpression" (7:10)
          id: Node "Identifier" (7:10)
            name: "add"
          params: Array [
            Node "NumericLiteral" (7:14)
              value: 3,
            Node "NumericLiteral" (7:16)
              value: 4,
          ],
  ]
`;

exports[`parses function declaration 3`] = `"Expected AssignmentExpression, but got Identifier"`;

exports[`parses function declaration 4`] = `"Expected Identifier or FunctionCallExpression or MathExpression or StringLiteral or NumericLiteral or BlockStatement, but got UnionOperation"`;

exports[`parses function declaration 5`] = `"Syntax error: unexpected end of block at 1:10"`;

exports[`parses function declaration 6`] = `"Syntax error: unexpected end of block at 1:10"`;

exports[`parses let declaration 1`] = `
Node "Program" (1:0)
  body: Array [
    Node "LetDeclaration" (1:0)
      value: Node "AssignmentExpression" (1:4)
        left: Node "Identifier" (1:4)
          name: "foo"
        right: Node "NumericLiteral" (1:10)
          value: 10,
    Node "LetDeclaration" (2:0)
      value: Node "AssignmentExpression" (2:4)
        left: Node "Identifier" (2:4)
          name: "bar"
        right: Node "StringLiteral" (2:10)
          value: "Hello world",
  ]
`;

exports[`parses let declaration 2`] = `"Expected AssignmentExpression, but got Identifier"`;

exports[`parses let declaration 3`] = `"Expected Identifier or FunctionCallExpression or MathExpression or StringLiteral or NumericLiteral, but got UnionOperation"`;

exports[`parses main declaration 1`] = `
Node "Program" (1:0)
  body: Array [
    Node "MainDeclaration" (1:0)
      value: Node "Identifier" (1:5)
        name: "Foo",
  ]
`;

exports[`parses main declaration 2`] = `
Node "Program" (1:0)
  body: Array [
    Node "MainDeclaration" (1:0)
      value: Node "FunctionCallExpression" (1:5)
        id: Node "Identifier" (1:5)
          name: "Foo"
        params: Array [
          Node "Identifier" (1:9)
            name: "Bar",
        ],
  ]
`;

exports[`parses main declaration 3`] = `
Node "Program" (1:0)
  body: Array [
    Node "MainDeclaration" (1:0)
      value: Node "FunctionCallExpression" (1:5)
        id: Node "Identifier" (1:5)
          name: "Foo"
        params: Array [
          Node "Identifier" (1:9)
            name: "Bar",
        ],
  ]
`;

exports[`parses main declaration 4`] = `"Syntax error: duplicate keyword \\"main\\" at 2:0"`;

exports[`parses main declaration 5`] = `"Expected Identifier or FunctionCallExpression, but got AssignmentExpression"`;

exports[`parses math expression 1`] = `
Node "Program" (1:0)
  body: Array [
    Node "LetDeclaration" (1:0)
      value: Node "AssignmentExpression" (1:4)
        left: Node "Identifier" (1:4)
          name: "a"
        right: Node "MathExpression" (1:8)
          left: Node "NumericLiteral" (1:8)
            value: 10
          operator: "*"
          right: Node "MathExpression" (1:13)
            left: Node "NumericLiteral" (1:13)
              value: 30
            operator: "+"
            right: Node "MathExpression" (1:18)
              left: Node "Identifier" (1:18)
                name: "b"
              operator: "-"
              right: Node "MathExpression" (1:22)
                left: Node "NumericLiteral" (1:22)
                  value: 20
                operator: "/"
                right: Node "Identifier" (1:27)
                  name: "foo",
  ]
`;

exports[`parses type declaration 1`] = `
Node "Program" (1:0)
  body: Array [
    Node "TypeDeclaration" (1:0)
      value: Node "AssignmentExpression" (1:5)
        left: Node "Identifier" (1:5)
          name: "Foo"
        right: Node "Identifier" (1:11)
          name: "Bar",
    Node "TypeDeclaration" (2:0)
      value: Node "AssignmentExpression" (2:5)
        left: Node "Identifier" (2:5)
          name: "Bar"
        right: Node "UnionOperation" (2:11)
          values: Array [
            Node "Identifier" (2:11)
              name: "Boolean",
            Node "Identifier" (2:21)
              name: "String",
            Node "Identifier" (2:30)
              name: "Number",
            Node "StringLiteral" (2:39)
              value: "foo",
            Node "NumericLiteral" (2:47)
              value: 42,
          ],
    Node "TypeDeclaration" (3:0)
      value: Node "AssignmentExpression" (3:5)
        left: Node "TypeParameterExpression" (3:5)
          id: Node "Identifier" (3:5)
            name: "Maybe"
          params: Array [
            Node "Identifier" (3:11)
              name: "Number",
          ]
        right: Node "UnionOperation" (3:20)
          values: Array [
            Node "Identifier" (3:20)
              name: "Nothing",
            Node "Identifier" (3:30)
              name: "Number",
          ],
    Node "TypeDeclaration" (4:0)
      value: Node "AssignmentExpression" (4:5)
        left: Node "Identifier" (4:5)
          name: "Users"
        right: Node "TypeInstantiationExpression" (4:13)
          id: Node "Identifier" (4:13)
            name: "List"
          params: Array [
            Node "Identifier" (4:18)
              name: "User",
          ],
  ]
`;

exports[`parses type declaration 2`] = `"Expected Identifier or TypeInstantiationExpression or UnionOperation or StringLiteral or NumericLiteral, but got MathExpression"`;
