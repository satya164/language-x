// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parses function declaration 1`] = `
Array [
  Node "FunctionDeclaration"
    value: Node "AssignmentExpression"
      left: Node "ParameterExpression"
        id: Node "Identifier"
          name: "calc"
        params: Array [
          Node "Identifier"
            name: "a",
          Node "Identifier"
            name: "b",
          Node "Identifier"
            name: "c",
        ]
      right: Node "MathExpression"
        left: Node "Identifier"
          name: "a"
        operator: "+"
        right: Node "MathExpression"
          left: Node "Identifier"
            name: "b"
          operator: "*"
          right: Node "Identifier"
            name: "c",
  Node "FunctionDeclaration"
    value: Node "AssignmentExpression"
      left: Node "ParameterExpression"
        id: Node "Identifier"
          name: "foo"
        params: Array [
          Node "Identifier"
            name: "a",
          Node "Identifier"
            name: "add",
        ]
      right: Node "ParameterExpression"
        id: Node "Identifier"
          name: "add"
        params: Array [
          Node "Identifier"
            name: "a",
        ],
]
`;

exports[`parses let declaration 1`] = `
Array [
  Node "LetDeclaration"
    value: Node "AssignmentExpression"
      left: Node "Identifier"
        name: "foo"
      right: Node "NumericLiteral"
        value: 10,
  Node "LetDeclaration"
    value: Node "AssignmentExpression"
      left: Node "Identifier"
        name: "bar"
      right: Node "StringLiteral"
        value: "\\"Hello world",
]
`;

exports[`parses math expression 1`] = `
Array [
  Node "LetDeclaration"
    value: Node "AssignmentExpression"
      left: Node "Identifier"
        name: "a"
      right: Node "MathExpression"
        left: Node "NumericLiteral"
          value: 10
        operator: "*"
        right: Node "MathExpression"
          left: Node "NumericLiteral"
            value: 30
          operator: "+"
          right: Node "MathExpression"
            left: Node "Identifier"
              name: "a"
            operator: "-"
            right: Node "MathExpression"
              left: Node "NumericLiteral"
                value: 20
              operator: "/"
              right: Node "Identifier"
                name: "foo",
]
`;

exports[`parses type declaration 1`] = `
Array [
  Node "TypeDeclaration"
    value: Node "AssignmentExpression"
      left: Node "Identifier"
        name: "Foo"
      right: Node "Identifier"
        name: "Bar",
  Node "TypeDeclaration"
    value: Node "AssignmentExpression"
      left: Node "Identifier"
        name: "Bar"
      right: Node "UnionOperation"
        values: Array [
          Node "Identifier"
            name: "Boolean",
          Node "Identifier"
            name: "String",
          Node "Identifier"
            name: "Number",
        ],
  Node "TypeDeclaration"
    value: Node "AssignmentExpression"
      left: Node "ParameterExpression"
        id: Node "Identifier"
          name: "Maybe"
        params: Array [
          Node "Identifier"
            name: "Number",
        ]
      right: Node "UnionOperation"
        values: Array [
          Node "Identifier"
            name: "Nothing",
          Node "Identifier"
            name: "Number",
        ],
  Node "TypeDeclaration"
    value: Node "AssignmentExpression"
      left: Node "Identifier"
        name: "Users"
      right: Node "ParameterExpression"
        id: Node "Identifier"
          name: "List"
        params: Array [
          Node "Identifier"
            name: "User",
        ],
]
`;
